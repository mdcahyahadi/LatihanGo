// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"gorm.io/gorm"
	"latihan/infrastructure/activityLog"
	"latihan/infrastructure/appLog"
	"latihan/infrastructure/configuration"
	"latihan/infrastructure/environment"
)

// Injectors from configWire.go:

func InitializeAppConfig() (*configuration.AppConfig, error) {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	return appConfig, nil
}

var (
	_wireEnvironmentConfigBinderPropertiesValue = configuration.EnvironmentConfigBinderProperties{
		FileName: "app-config",
		Path:     "./env",
	}
)

// Injectors from injector.go:

func InjectAppEnvironment() (environment.AppEnvironment, error) {
	appEnvironment, err := ProvideAppEnvironment()
	if err != nil {
		return "", err
	}
	return appEnvironment, nil
}

func InjectAppConfig() configuration.AppConfig {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	configurationAppConfig := ProvideAppEnvConfig(appConfig)
	return configurationAppConfig
}

func InjectLogger() (*appLog.AppLog, error) {
	appEnvironment, err := ProvideAppEnvironment()
	if err != nil {
		return nil, err
	}
	appLogAppLog := ProvideLogger(appEnvironment)
	return appLogAppLog, nil
}

func InjectPostgre() *gorm.DB {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	db := ProvidePostgre(appConfig)
	return db
}

func InjectActivityLogger() activityLog.IService {
	environmentConfigBinderProperties := _wireEnvironmentConfigBinderPropertiesValue
	appConfig := ProvideAppConfig(environmentConfigBinderProperties)
	iService := ProvideActivityLogger(appConfig)
	return iService
}

// configWire.go:

var (
	configModuleSets = wire.NewSet(wire.Value(configuration.EnvironmentConfigBinderProperties{
		FileName: "app-config",
		Path:     "./env",
	}), ProvideAppConfig)
)

func ProvideAppConfig(properties configuration.EnvironmentConfigBinderProperties) *configuration.AppConfig {
	environmentConfigBinder := configuration.NewEnvironmentConfigBinder(properties)
	environmentConfigBinder.Bind()
	config, err := environmentConfigBinder.GetAppConfig()
	if err != nil {
		panic(err)
	}
	return config
}

// injector.go:

var (
	AppModule = wire.NewSet(
		configModuleSets,
		ProvideAppEnvironment,
		ProvideAppEnvConfig,
		ProvideLogger,
		ProvidePostgre,
		ProvideActivityLogger,
	)
)
